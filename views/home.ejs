<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SkyStore</title>
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/flowbite@3.0.0/dist/flowbite.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Inter", sans-serif;
        color: #1f2937;
        position: relative;
        height: 100vh;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
      }

      /* Canvas as a fixed background */
      #canvas-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
      }

      #canvas {
        background-color: #2c343f;
        width: 100%;
        height: 100%;
        display: block;
      }

      /* Main content container */
      main {
        position: relative;
        z-index: 10;
        padding: 1rem;
        max-width: 1200px;
        margin: 0 auto;
        min-height: 100vh;
      }

      .header-container {
        background: linear-gradient(
          135deg,
          rgba(59, 130, 246, 0.9),
          rgba(30, 64, 175, 0.9)
        );
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        margin-bottom: 1rem;
        backdrop-filter: blur(5px);
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: space-between;
        align-items: center;
      }

      .content-container {
        background-color: rgba(255, 255, 255, 0.85);
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        backdrop-filter: blur(10px);
      }

      .upload-btn,
      .logout-btn {
        transition: all 0.3s ease;
        border: none;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.625rem 1rem;
      }

      .upload-btn:hover,
      .logout-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }

      .file-card {
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        border-left: 4px solid #3b82f6;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
      }

      .file-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
      }

      /* Responsive adjustments */
      @media screen and (max-width: 768px) {
        .header-container {
          flex-direction: column;
          text-align: center;
          gap: 1rem;
        }

        .file-card {
          flex-direction: column;
          align-items: flex-start;
          gap: 1rem;
        }

        .file-actions {
          width: 100%;
          justify-content: space-between;
        }

        .upload-form {
          width: 90%;
          margin: 0 auto;
        }

        .dropzone {
          height: 250px;
        }
      }

      @media screen and (max-width: 480px) {
        main {
          padding: 0.5rem;
        }

        .header-container {
          padding: 0.75rem;
        }

        .upload-btn,
        .logout-btn {
          width: 100%;
          justify-content: center;
        }

        .file-actions {
          flex-direction: column;
          align-items: flex-start;
        }
      }

      /* Rest of the existing styles remain the same */
      .upload-btn {
        background-color: #534ea9;
      }

      .upload-btn:hover {
        background-color: #4338ca;
      }

      .logout-btn {
        background-color: #ef4444;
      }

      .logout-btn:hover {
        background-color: #dc2626;
      }

      .file-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
      }

      .action-btn {
        display: flex;
        align-items: center;
        gap: 0.3rem;
        font-weight: 500;
        transition: all 0.2s ease;
      }

      .view-btn {
        color: #10b981;
      }

      .view-btn:hover {
        color: #059669;
      }

      .download-btn {
        color: #3b82f6;
      }

      .download-btn:hover {
        color: #2563eb;
      }

      .delete-btn {
        color: #ef4444;
      }

      .delete-btn:hover {
        color: #dc2626;
      }

      .upload-form {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.3s ease-out;
      }

      .dropzone {
        border: 2px dashed #d1d5db;
        transition: all 0.3s ease;
      }

      .dropzone:hover {
        border-color: #3b82f6;
        background-color: #f0f7ff;
      }

      .close-btn {
        background-color: rgba(0, 0, 0, 0.2);
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
      }

      .close-btn:hover {
        background-color: rgba(0, 0, 0, 0.4);
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(-20px);
        }

        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .pop-up {
        backdrop-filter: blur(5px);
      }

      .no-files {
        text-align: center;
        padding: 3rem 0;
        color: #6b7280;
      }

      /* Custom cursor */
      body {
        cursor: none;
      }

      .logout-btn {
        background-color: #ef4444;
        transition: all 0.3s ease;
        border: none;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .logout-btn:hover {
        background-color: #dc2626;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }

      #cursor {
        position: fixed;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.5);
        transform: translate(-50%, -50%);
        mix-blend-mode: difference;
        pointer-events: none;
        transition: width 0.2s, height 0.2s;
        z-index: 9999;
      }

      a:hover ~ #cursor,
      button:hover ~ #cursor {
        width: 40px;
        height: 40px;
        background-color: rgba(255, 255, 255, 0.8);
      }
    </style>
  </head>

  <body>
    <!-- Canvas Background Container -->
    <div id="canvas-container">
      <canvas id="canvas"></canvas>
    </div>

    <!-- Custom Cursor -->
    <div id="cursor"></div>

    <main>
      <!-- Greeting Section -->
      <div class="header-container flex justify-between items-center">
        <div class="text-white text-lg">
          <h2 class="text-xl font-bold">Welcome, <%= username || 'User' %>!</h2>
          <p class="text-sm opacity-80 mt-1">Manage your files securely</p>
        </div>

        <!-- Upload Button -->
        <button
          type="button"
          onclick="showPopUp()"
          class="upload-btn text-white rounded-lg px-5 py-2.5 text-center flex items-center gap-2"
        >
          <i class="ri-upload-cloud-line"></i> Upload File
        </button>

        <button
          onclick="logout()"
          class="logout-btn text-white rounded-lg px-5 py-2.5 text-center flex items-center gap-2 bg-red-500 hover:bg-red-600 transition-all"
        >
          <i class="ri-logout-box-r-line"></i> Logout
        </button>
      </div>

      <!-- Files List -->
      <div class="content-container">
        <h3 class="text-lg font-semibold text-gray-700 mb-4">Your Files</h3>

        <div class="files flex flex-col gap-2">
          <% if (files && files.length> 0) { %> <% files.forEach((file)=> { %>
          <div
            class="file-card p-4 flex justify-between bg-red-700 items-center"
          >
            <div class="flex items-center gap-3">
              <i class="ri-file-line text-2xl text-blue-500"></i>
              <h3 class="font-medium"><%= file.originalname %></h3>
            </div>

            <div class="flex gap-4">
              <!-- View Button -->
              <a
                href="<%= file.cloudinaryUrl %>"
                target="_blank"
                class="action-btn view-btn"
              >
                <i class="ri-eye-line"></i> View
              </a>

              <!-- Download Button -->
              <a
                href="/download/<%= file._id %>"
                class="action-btn download-btn"
                download="<%= file.originalname %>"
              >
                <i class="ri-download-line"></i> Download
              </a>

              <!-- Delete Button -->
              <button
                onclick="deleteFile('<%= file._id %>')"
                class="action-btn delete-btn"
              >
                <i class="ri-delete-bin-line"></i> Delete
              </button>
            </div>
          </div>
          <% }); %> <% } else { %>
          <div class="no-files">
            <i class="ri-inbox-line text-5xl opacity-50 mb-3"></i>
            <p>No files yet. Upload your first file!</p>
          </div>
          <% } %>
        </div>
      </div>
    </main>

    <!-- Pop-up Upload Form -->
    <div
      class="pop-up hidden fixed left-0 top-0 h-screen w-screen flex items-center justify-center bg-gray-800 bg-opacity-50 z-50"
    >
      <form
        action="/upload"
        method="post"
        enctype="multipart/form-data"
        class="upload-form p-6 w-full max-w-lg relative"
      >
        <h3 class="text-xl font-bold mb-4 text-gray-800">Upload New File</h3>

        <div class="flex items-center justify-center w-full">
          <label
            for="dropzone-file"
            class="dropzone flex flex-col items-center justify-center w-full h-64 rounded-lg cursor-pointer bg-gray-50"
          >
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg
                class="w-10 h-10 mb-4 text-gray-500"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 20 16"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
                />
              </svg>
              <p class="mb-2 text-sm text-gray-500">
                <span class="font-semibold">Click to upload</span> or drag and
                drop
              </p>
              <p class="text-xs text-gray-500">
                SVG, PNG, JPG or GIF (MAX. 800x400px)
              </p>
            </div>
            <input id="dropzone-file" type="file" class="hidden" name="file" />
          </label>
        </div>

        <div class="flex justify-between mt-6">
          <button
            type="button"
            onclick="hidePopUp()"
            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="upload-btn px-4 py-2 rounded-lg text-white font-medium"
          >
            Upload File
          </button>
        </div>
      </form>
      <button
        onclick="hidePopUp()"
        class="close-btn absolute top-4 right-4 text-white"
      >
        <i class="ri-close-fill"></i>
      </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.0.0/dist/flowbite.min.js"></script>
    <script>
      function showPopUp() {
        document.querySelector(".pop-up").style.display = "flex";
      }

      function hidePopUp() {
        document.querySelector(".pop-up").style.display = "none";
      }

      function deleteFile(fileId) {
        if (confirm("Are you sure you want to delete this file?")) {
          fetch(`/delete/${fileId}`, { method: "DELETE" })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                alert("File deleted successfully!");
                location.reload();
              } else {
                alert("Error deleting file!");
              }
            });
        }
      }

      // Show file name when selected
      document
        .getElementById("dropzone-file")
        .addEventListener("change", function (e) {
          const fileName = e.target.files[0]?.name;
          if (fileName) {
            const fileNameElement = document.createElement("p");
            fileNameElement.classList.add(
              "mt-2",
              "text-sm",
              "text-blue-600",
              "font-medium"
            );
            fileNameElement.textContent = `Selected: ${fileName}`;

            // Remove any previous filename display
            const existingFileNames = document.querySelectorAll(
              ".dropzone p.text-blue-600"
            );
            existingFileNames.forEach((el) => el.remove());

            document.querySelector(".dropzone").appendChild(fileNameElement);
          }
        });

      function getRandomColor() {
        const letters = "0123456789ABCDEF";
        let color = "#";
        for (let i = 0; i < 6; i++) {
          color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
      }

      document.addEventListener("DOMContentLoaded", function () {
        const fileCards = document.querySelectorAll(".file-card");
        fileCards.forEach((card) => {
          card.style.backgroundColor = getRandomColor();
        });
      });

      // Custom cursor
      const cursor = document.getElementById("cursor");

      document.addEventListener("mousemove", (e) => {
        cursor.style.left = e.clientX + "px";
        cursor.style.top = e.clientY + "px";
      });

      // Canvas background
      var c = document.getElementById("canvas");
      var ctx = c.getContext("2d");

      function resize() {
        var box = c.getBoundingClientRect();
        c.width = box.width;
        c.height = box.height;
      }

      var light = {
        x: 160,
        y: 200,
      };

      var colors = ["#f5c156", "#e6616b", "#5cd3ad"];

      function drawLight() {
        ctx.beginPath();
        ctx.arc(light.x, light.y, 1000, 0, 2 * Math.PI);
        var gradient = ctx.createRadialGradient(
          light.x,
          light.y,
          0,
          light.x,
          light.y,
          1000
        );
        gradient.addColorStop(0, "#3b4654");
        gradient.addColorStop(1, "#2c343f");
        ctx.fillStyle = gradient;
        ctx.fill();

        ctx.beginPath();
        ctx.arc(light.x, light.y, 20, 0, 2 * Math.PI);
        gradient = ctx.createRadialGradient(
          light.x,
          light.y,
          0,
          light.x,
          light.y,
          5
        );
        gradient.addColorStop(0, "#fff");
        gradient.addColorStop(1, "#3b4654");
        ctx.fillStyle = gradient;
        ctx.fill();
      }

      function Box() {
        this.half_size = Math.floor(Math.random() * 50 + 1);
        this.x = Math.floor(Math.random() * c.width + 1);
        this.y = Math.floor(Math.random() * c.height + 1);
        this.r = Math.random() * Math.PI;
        this.shadow_length = 2000;
        this.color = colors[Math.floor(Math.random() * colors.length)];

        this.getDots = function () {
          var full = (Math.PI * 2) / 4;

          var p1 = {
            x: this.x + this.half_size * Math.sin(this.r),
            y: this.y + this.half_size * Math.cos(this.r),
          };
          var p2 = {
            x: this.x + this.half_size * Math.sin(this.r + full),
            y: this.y + this.half_size * Math.cos(this.r + full),
          };
          var p3 = {
            x: this.x + this.half_size * Math.sin(this.r + full * 2),
            y: this.y + this.half_size * Math.cos(this.r + full * 2),
          };
          var p4 = {
            x: this.x + this.half_size * Math.sin(this.r + full * 3),
            y: this.y + this.half_size * Math.cos(this.r + full * 3),
          };

          return {
            p1: p1,
            p2: p2,
            p3: p3,
            p4: p4,
          };
        };
        this.rotate = function () {
          var speed = (60 - this.half_size) / 20;
          this.r += speed * 0.002;
          this.x += speed;
          this.y += speed;
        };
        this.draw = function () {
          var dots = this.getDots();
          ctx.beginPath();
          ctx.moveTo(dots.p1.x, dots.p1.y);
          ctx.lineTo(dots.p2.x, dots.p2.y);
          ctx.lineTo(dots.p3.x, dots.p3.y);
          ctx.lineTo(dots.p4.x, dots.p4.y);
          ctx.fillStyle = this.color;
          ctx.fill();

          if (this.y - this.half_size > c.height) {
            this.y -= c.height + 100;
          }
          if (this.x - this.half_size > c.width) {
            this.x -= c.width + 100;
          }
        };
        this.drawShadow = function () {
          var dots = this.getDots();
          var angles = [];
          var points = [];

          for (dot in dots) {
            var angle = Math.atan2(
              light.y - dots[dot].y,
              light.x - dots[dot].x
            );
            var endX =
              dots[dot].x + this.shadow_length * Math.sin(-angle - Math.PI / 2);
            var endY =
              dots[dot].y + this.shadow_length * Math.cos(-angle - Math.PI / 2);
            angles.push(angle);
            points.push({
              endX: endX,
              endY: endY,
              startX: dots[dot].x,
              startY: dots[dot].y,
            });
          }

          for (var i = points.length - 1; i >= 0; i--) {
            var n = i == 3 ? 0 : i + 1;
            ctx.beginPath();
            ctx.moveTo(points[i].startX, points[i].startY);
            ctx.lineTo(points[n].startX, points[n].startY);
            ctx.lineTo(points[n].endX, points[n].endY);
            ctx.lineTo(points[i].endX, points[i].endY);
            ctx.fillStyle = "#2c343f";
            ctx.fill();
          }
        };
      }

      var boxes = [];

      function draw() {
        ctx.clearRect(0, 0, c.width, c.height);
        drawLight();

        for (var i = 0; i < boxes.length; i++) {
          boxes[i].rotate();
          boxes[i].drawShadow();
        }
        for (var i = 0; i < boxes.length; i++) {
          collisionDetection(i);
          boxes[i].draw();
        }
        requestAnimationFrame(draw);
      }

      resize();
      draw();

      while (boxes.length < 14) {
        boxes.push(new Box());
      }

      window.onresize = resize;

      document.addEventListener("mousemove", function (e) {
        light.x = e.clientX;
        light.y = e.clientY;
      });

      function collisionDetection(b) {
        for (var i = boxes.length - 1; i >= 0; i--) {
          if (i != b) {
            var dx =
              boxes[b].x +
              boxes[b].half_size -
              (boxes[i].x + boxes[i].half_size);
            var dy =
              boxes[b].y +
              boxes[b].half_size -
              (boxes[i].y + boxes[i].half_size);
            var d = Math.sqrt(dx * dx + dy * dy);
            if (d < boxes[b].half_size + boxes[i].half_size) {
              boxes[b].half_size =
                boxes[b].half_size > 1 ? (boxes[b].half_size -= 1) : 1;
              boxes[i].half_size =
                boxes[i].half_size > 1 ? (boxes[i].half_size -= 1) : 1;
            }
          }
        }
      }

      // Client-side JavaScript

      function logout() {
        fetch("/logout", {
          method: "POST",
          credentials: "include",
        })
          .then((response) => {
            if (response.redirected) {
              window.location.href = response.url; // Redirect to login page
            } else {
              alert("Logout failed!");
            }
          })
          .catch((error) => console.error("Error:", error));
      }
    </script>
  </body>
</html>
